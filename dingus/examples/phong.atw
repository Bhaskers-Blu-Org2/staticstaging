# title: phong lighting
# mode: webgl
# ---

# Load buffers and parameters for the main model.
var mesh = teapot;
var position = mesh_positions(mesh);
var normal = mesh_normals(mesh);
var indices = mesh_indices(mesh);
var size = mesh_size(mesh);
var model = mat4.create();

# Light-source marker model.
var b_position = mesh_positions(bunny);
var b_normal = mesh_normals(bunny);
var b_indices = mesh_indices(bunny);
var b_size = mesh_size(bunny);
var b_model = mat4.create();

# Make the bunny tiny.
var id = mat4.create();

# The parameters for the Phong shader.
var specular = 50.0;
var light_color = vec3(1.0, 0.2, 0.5);

# An inverse view matrix, which we'll use to get the view direction in world
# space.
var inv_view = mat4.create();

# Phong shader.
def phong(pos: (Float3 Array), norm: (Float3 Array), model: Mat4, lightpos: Vec3) (
  mat4.invert(inv_view, view);

  vtx s<
    gl_Position = projection * view * model * vec4(position, 1.0);

    # TODO Move to render stage.
    var view_dir_world = vec3(inv_view * vec4(0.0, 0.0, 1.0, 0.0));

    frag s<
      # Convert to world space.
      var position_world = vec3(model * vec4(pos, 1.0));
      var normal_world = normalize(vec3(model * vec4(pos, 0.0)));

      # Light.
      var light_direction = normalize(lightpos - position_world);

      # Diffuse.
      var ndl = (vec3( max(0.0, dot(normal_world, light_direction)) ));

      # Specular.
      var angle = normalize(view_dir_world + light_direction);
      var spec_comp_b = max(0.0, dot(normal_world, angle));
      var spec_comp = (pow( spec_comp_b, max(1.0, specular) )) * 2.0;

      gl_FragColor = vec4((light_color * ndl) + vec3(spec_comp), 1.0);
    >
  >;
);

# Simple, solid-color shader.
def solid(pos: (Float3 Array), model: Mat4) (
  vtx s<
    gl_Position = projection * view * model * vec4(b_position, 1.0);
    frag s<
      gl_FragColor = vec4(light_color, 1.0);
    >
  >;
);

render r<
  var t = Date.now();
  var light_position = vec3(
    (Math.cos(t / 200)) * 20.0,
    0.0,
    (Math.sin(t / 200)) * 20.0
  );

  phong(position, normal, model, light_position);
  draw_mesh(indices, size);

  # Place the bunny at the light source, for illustrative purposes.
  mat4.translate(b_model, id, light_position);
  mat4.scale(b_model, b_model, vec3(0.1, 0.1, 0.1));
  solid(b_position, b_model);
  draw_mesh(b_indices, b_size);
>
